#!/usr/bin/env python3
"""
Script para testes locais do sistema de automa√ß√£o de of√≠cios.
Permite testar componentes individuais sem deploy.
"""
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# Adiciona o diret√≥rio raiz ao path
ROOT_DIR = Path(__file__).parent.parent
sys.path.insert(0, str(ROOT_DIR))

from utils.api_clients import FirestoreClient, GroqClient
from utils.schema import OficioData, TipoResposta


def test_groq_extraction():
    """Testa extra√ß√£o de dados via Groq LLM"""
    print("=" * 60)
    print("TESTE: Extra√ß√£o de Dados via Groq LLM")
    print("=" * 60)
    
    # Texto de exemplo de um of√≠cio
    texto_oficio = """
    OF√çCIO N¬∞ 456/2024
    
    Vara C√≠vel da Comarca de S√£o Paulo
    Processo n¬∞ 1234567-89.2024.8.26.0100
    
    Excelent√≠ssimo Senhor,
    
    A autoridade judicial Dra. Maria Silva, Ju√≠za de Direito da 1¬™ Vara C√≠vel,
    solicita as seguintes informa√ß√µes sobre o cliente Jo√£o da Silva (CPF 123.456.789-00):
    
    1. Extratos banc√°rios dos √∫ltimos 6 meses
    2. Comprovantes de rendimentos
    3. Declara√ß√£o de imposto de renda
    
    Solicitamos o envio das informa√ß√µes no prazo de 10 dias √∫teis.
    
    Atenciosamente,
    Dra. Maria Silva
    Ju√≠za de Direito
    """
    
    try:
        # Inicializa cliente Groq
        groq_client = GroqClient()
        
        # Prepara o schema para extra√ß√£o
        class OficioDataTest(OficioData):
            org_id: str = "test_org"
            thread_id: str = "test_thread"
        
        print("\nüìÑ Texto do of√≠cio:")
        print(texto_oficio)
        
        print("\nü§ñ Iniciando extra√ß√£o via LLM...")
        
        # Extrai dados
        resultado = groq_client.extract_structured_data(
            texto_oficio,
            OficioDataTest
        )
        
        print("\n‚úÖ Extra√ß√£o conclu√≠da!")
        print("\nüìä Dados extra√≠dos:")
        print(json.dumps(resultado.model_dump(mode='json'), indent=2, ensure_ascii=False))
        
        print(f"\nüéØ Confian√ßa: {resultado.confianca * 100:.1f}%")
        print(f"‚è∞ Prazo: {resultado.prazo_dias} dias")
        print(f"üìù Tipo de resposta: {resultado.tipo_resposta_provavel}")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro na extra√ß√£o: {e}")
        return False


def test_cpf_validation():
    """Testa valida√ß√£o de CPF"""
    print("\n" + "=" * 60)
    print("TESTE: Valida√ß√£o de CPF")
    print("=" * 60)
    
    from funcoes.W1_processamento_async.main import validar_cpf
    
    test_cases = [
        ("123.456.789-09", True, "CPF v√°lido formatado"),
        ("12345678909", True, "CPF v√°lido sem formata√ß√£o"),
        ("111.111.111-11", False, "CPF com d√≠gitos repetidos"),
        ("123.456.789-00", False, "CPF inv√°lido"),
        ("123", False, "CPF com poucos d√≠gitos"),
    ]
    
    success_count = 0
    
    for cpf, expected, descricao in test_cases:
        resultado = validar_cpf(cpf)
        status = "‚úÖ" if resultado == expected else "‚ùå"
        print(f"{status} {descricao}: {cpf} -> {resultado}")
        
        if resultado == expected:
            success_count += 1
    
    print(f"\nüìä Resultado: {success_count}/{len(test_cases)} testes passaram")
    
    return success_count == len(test_cases)


def test_cnpj_validation():
    """Testa valida√ß√£o de CNPJ"""
    print("\n" + "=" * 60)
    print("TESTE: Valida√ß√£o de CNPJ")
    print("=" * 60)
    
    from funcoes.W1_processamento_async.main import validar_cnpj
    
    test_cases = [
        ("11.222.333/0001-81", True, "CNPJ v√°lido formatado"),
        ("11222333000181", True, "CNPJ v√°lido sem formata√ß√£o"),
        ("11.111.111/1111-11", False, "CNPJ com d√≠gitos repetidos"),
        ("11.222.333/0001-00", False, "CNPJ inv√°lido"),
        ("123", False, "CNPJ com poucos d√≠gitos"),
    ]
    
    success_count = 0
    
    for cnpj, expected, descricao in test_cases:
        resultado = validar_cnpj(cnpj)
        status = "‚úÖ" if resultado == expected else "‚ùå"
        print(f"{status} {descricao}: {cnpj} -> {resultado}")
        
        if resultado == expected:
            success_count += 1
    
    print(f"\nüìä Resultado: {success_count}/{len(test_cases)} testes passaram")
    
    return success_count == len(test_cases)


def test_prioridade_calculation():
    """Testa c√°lculo de prioridade"""
    print("\n" + "=" * 60)
    print("TESTE: C√°lculo de Prioridade")
    print("=" * 60)
    
    from funcoes.W1_processamento_async.main import calcular_prioridade
    
    test_cases = [
        (3, TipoResposta.dados, "alta", "Dados + prazo curto"),
        (10, TipoResposta.dados, "media", "Dados + prazo m√©dio"),
        (20, TipoResposta.dados, "baixa", "Dados + prazo longo"),
        (2, TipoResposta.positiva, "alta", "Positiva + prazo muito curto"),
        (7, TipoResposta.positiva, "media", "Positiva + prazo m√©dio"),
        (15, TipoResposta.negativa, "baixa", "Negativa + prazo longo"),
    ]
    
    success_count = 0
    
    for prazo, tipo, expected, descricao in test_cases:
        resultado = calcular_prioridade(prazo, tipo)
        status = "‚úÖ" if resultado == expected else "‚ùå"
        print(f"{status} {descricao}: {prazo} dias, {tipo} -> {resultado}")
        
        if resultado == expected:
            success_count += 1
    
    print(f"\nüìä Resultado: {success_count}/{len(test_cases)} testes passaram")
    
    return success_count == len(test_cases)


def test_firestore_connection():
    """Testa conex√£o com Firestore"""
    print("\n" + "=" * 60)
    print("TESTE: Conex√£o com Firestore")
    print("=" * 60)
    
    try:
        # Verifica se h√° emulator configurado
        emulator = os.getenv('FIRESTORE_EMULATOR_HOST')
        if emulator:
            print(f"üîß Usando emulador: {emulator}")
        else:
            print("‚òÅÔ∏è  Usando Firestore em produ√ß√£o")
        
        # Inicializa cliente
        client = FirestoreClient()
        
        # Tenta buscar uma organiza√ß√£o de teste
        print("\nüìã Testando busca de organiza√ß√£o...")
        org = client.get_organization_by_domain("exemplo.com.br")
        
        if org:
            print(f"‚úÖ Organiza√ß√£o encontrada: {org.get('name')} (ID: {org.get('org_id')})")
        else:
            print("‚ö†Ô∏è  Nenhuma organiza√ß√£o encontrada para 'exemplo.com.br'")
            print("   Crie uma organiza√ß√£o de teste conforme o SETUP.md")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro ao conectar no Firestore: {e}")
        print("\nüí° Dicas:")
        print("   - Verifique se GOOGLE_APPLICATION_CREDENTIALS est√° configurado")
        print("   - Ou inicie o emulador: gcloud beta emulators firestore start")
        return False


def test_pydantic_schema():
    """Testa valida√ß√£o do schema Pydantic"""
    print("\n" + "=" * 60)
    print("TESTE: Valida√ß√£o de Schema Pydantic")
    print("=" * 60)
    
    try:
        # Testa cria√ß√£o v√°lida
        print("\n‚úÖ Testando dados v√°lidos...")
        oficio_valido = OficioData(
            org_id="org_123",
            thread_id="thread_456",
            autoridade_nome="Vara Criminal de SP",
            processo_numero="1234567-89.2024.8.26.0100",
            solicitacoes=["Extrato banc√°rio", "Comprovante de renda"],
            prazo_dias=10,
            tipo_resposta_provavel=TipoResposta.dados,
            confianca=0.95
        )
        print(f"   Of√≠cio criado: {oficio_valido.autoridade_nome}")
        
        # Testa valida√ß√£o de confian√ßa
        print("\n‚ùå Testando confian√ßa inv√°lida...")
        try:
            oficio_invalido = OficioData(
                org_id="org_123",
                thread_id="thread_456",
                autoridade_nome="Teste",
                prazo_dias=10,
                tipo_resposta_provavel=TipoResposta.dados,
                confianca=1.5  # Inv√°lido!
            )
            print("   ‚ö†Ô∏è  Valida√ß√£o n√£o detectou erro (problema!)")
            return False
        except Exception as e:
            print(f"   ‚úÖ Erro detectado corretamente: {e}")
        
        # Testa valida√ß√£o de prazo
        print("\n‚ùå Testando prazo inv√°lido...")
        try:
            oficio_invalido = OficioData(
                org_id="org_123",
                thread_id="thread_456",
                autoridade_nome="Teste",
                prazo_dias=-5,  # Inv√°lido!
                tipo_resposta_provavel=TipoResposta.dados,
                confianca=0.9
            )
            print("   ‚ö†Ô∏è  Valida√ß√£o n√£o detectou erro (problema!)")
            return False
        except Exception as e:
            print(f"   ‚úÖ Erro detectado corretamente: {e}")
        
        print("\n‚úÖ Todos os testes de schema passaram!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        return False


def main():
    """Executa todos os testes"""
    print("\n" + "=" * 60)
    print("üß™ TESTES LOCAIS - AUTOMA√á√ÉO DE OF√çCIOS")
    print("=" * 60)
    print(f"Data/Hora: {datetime.now().isoformat()}")
    print(f"Diret√≥rio: {ROOT_DIR}")
    
    # Verifica vari√°veis de ambiente
    print("\nüìã Vari√°veis de ambiente:")
    print(f"   GCP_PROJECT_ID: {os.getenv('GCP_PROJECT_ID', '‚ùå n√£o configurado')}")
    print(f"   GROQ_API_KEY: {'‚úÖ configurado' if os.getenv('GROQ_API_KEY') else '‚ùå n√£o configurado'}")
    print(f"   FIRESTORE_EMULATOR_HOST: {os.getenv('FIRESTORE_EMULATOR_HOST', '(produ√ß√£o)')}")
    
    # Lista de testes
    tests = [
        ("Schema Pydantic", test_pydantic_schema),
        ("Valida√ß√£o CPF", test_cpf_validation),
        ("Valida√ß√£o CNPJ", test_cnpj_validation),
        ("C√°lculo de Prioridade", test_prioridade_calculation),
        ("Conex√£o Firestore", test_firestore_connection),
    ]
    
    # Adiciona teste do Groq apenas se API key configurada
    if os.getenv('GROQ_API_KEY'):
        tests.append(("Extra√ß√£o Groq LLM", test_groq_extraction))
    else:
        print("\n‚ö†Ô∏è  Pulando teste Groq (GROQ_API_KEY n√£o configurado)")
    
    # Executa testes
    results = []
    
    for name, test_func in tests:
        try:
            result = test_func()
            results.append((name, result))
        except Exception as e:
            print(f"\n‚ùå Erro cr√≠tico no teste '{name}': {e}")
            results.append((name, False))
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{status}: {name}")
    
    print("\n" + "=" * 60)
    print(f"Resultado final: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram!")
        sys.exit(0)
    else:
        print(f"‚ö†Ô∏è  {total - passed} teste(s) falharam")
        sys.exit(1)


if __name__ == "__main__":
    main()





